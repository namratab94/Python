def get_length(dna):
    """ (str) -> int

    Return the length of the DNA sequence dna.

    >>> get_length('ATCGAT')
    6
    >>> get_length('ATCG')
    4
    """
    return len(dna)

def is_longer(dna1, dna2):
    """ (str, str) -> bool

    Return True if and only if DNA sequence dna1 is longer than DNA sequence
    dna2.

    >>> is_longer('ATCG', 'AT')
    True
    >>> is_longer('ATCG', 'ATCGGA')
    False
    """
    if get_length(dna1) > get_length(dna2):
        return True
    else:
        return False
    
def count_nucleotides(dna, nucleotide):
    """ (str, str) -> int

    Return the number of occurrences of nucleotide in the DNA sequence dna.

    >>> count_nucleotides('ATCGGC', 'G')
    2
    >>> count_nucleotides('ATCTA', 'G')
    0
    """
    return dna.count(nucleotide)
        
def contains_sequence(dna1, dna2):
    """ (str, str) -> bool

    Return True if and only if DNA sequence dna2 occurs in the DNA sequence
    dna1.

    >>> contains_sequence('ATCGGC', 'GG')
    True
    >>> contains_sequence('ATCGGC', 'GT')
    False

    """
    if dna2 in dna1:
        return True
    else:
    	return False    
                
def is_valid_sequence(test_dna):
    """ (str) -> bool
    Return True if and only if thr DNA sequence is valid i.e, test_dna 
    should countain only 'A', 'T', 'C', and 'G'. 
    
    >>>is_valid_sequence('ATCGGC')ak
    True
    >>>is_valid_sequence('XYZ')
    False
    """
    length = len(test_dna)
    total = test_dna.count('A') + test_dna.count('T') + test_dna.count('C') + test_dna.count('G')
    if total == length:
        return True
    else:
        return False

def insert_sequence(dna1, dna2, index):
    """(str, str, int) -> str
    Inserts dna2 in dna1 at index's position of dna1.
    >>> insert_sequece('CCGAT' , 'ATG', 1)
    >>> 'CCATGGAT'
    """
    temp = dna1[:index] + dna2 + dna1[index:]
    return temp

def get_complement(nucleotide):
    """(str) -> str
    Returns the complement of nucleotide
    >>> get_complement('A')
    >>> T
    >>>get_complement('C')
    >>>G
    """
    if nucleotide == 'A':
        return 'T'
    elif nucleotide == 'T':
        return 'A'
    elif nucleotide == 'C':
        return 'G'
    elif nucleotide == 'G':
        return 'C'
    else:
        return None

def get_complementary_sequence(dna):
    """(str) -> str
    >>> get_complementary_sequence('TA')
    >>> AT
    """
    complement = dna.maketrans('ACTG', 'TGAC')
    comp = dna.translate(complement)[::]
    return comp
